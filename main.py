import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import time
from aiogram.types import InputFile
from PIL import Image, ImageFont, ImageDraw

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token="YOUR_BOT_TOKEN")
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –ü—Ä–æ—Å—Ç–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
products_db = {
    1: {"title": "Iphone 15 pro max", "price": 3400},
    2: {"title": "–¢–µ–ª–µ—Ñ–æ–Ω Oneplus", "price": 1500},
    3: {"title": "–¢–µ–ª–µ—Ñ–æ–Ω Sony", "price": 300},
    4: {"title": "Iphone 14 pro", "price": 2600},
    5: {"title": "–¢–µ–ª–µ—Ñ–æ–Ω Huawei", "price": 500},
    6: {"title": "MacBook", "price": 3000},
    7: {"title": "Huawei Band 6", "price": 150},
    8: {"title": "–ù–æ—É—Ç–±—É–∫ Lenovo", "price": 1300},
    9: {"title": "–¢–µ–ª–µ–≤–∏–∑–æ—Ä", "price": 1000},
    10: {"title": "–ò–≥—Ä–æ–≤–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä", "price": 2500}
}

# –ö–ª–∞—Å—Å State, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    product = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é
@dp.message_handler(commands=['start'], state="*")
async def show_menu(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('üõí –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã')
    item2 = types.KeyboardButton('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    markup.add(item1, item2)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? –ö–ª–∏–∫–∞–π –ø–æ –∫–Ω–æ–ø–∫–æ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–≤–æ–∏—Ö –∂–µ–ª–∞–Ω–∏–π) –¢–∞–∫–∂–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /photo –ø–æ—è–≤–∏—Ç—Å—è —Ñ–æ—Ç–æ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞. –í –æ–±—â–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.", reply_markup=markup)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
@dp.message_handler(content_types=['photo'])
async def handle_docs_photo(message: types.Message):
    await message.photo[-1].download('r1.png')
    time.sleep(1)
    sample = Image.open('r1.png')
    font = ImageFont.truetype('Minecraft.otf', size=154, encoding='ASCII')
    draw = ImageDraw.Draw(sample)
    draw.text((250, 500), font=font, text="Hello world", align="center", fill='blue')
    sample.save('r3.png')
    sample1 = Image.open('r1.png')
    font1 = ImageFont.truetype('tahoma.ttf', size=154, encoding='ASCII')
    draw1 = ImageDraw.Draw(sample1)
    draw1.text((250, 500), font=font1, text="Hello world", align="center", fill='blue')
    sample1.save('r2.png')
    await message.answer_photo(InputFile('r3.png'))
    await message.answer_photo(InputFile('r2.png'))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /photo –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@dp.message_handler(commands=['photo'], state="*")
async def send_photo(message: types.Message):
    # –ó–∞–º–µ–Ω–∏—Ç–µ 'photo_url' –Ω–∞ URL-–∞–¥—Ä–µ—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    photo_url = 'https://kartinkof.club/uploads/posts/2023-05/1683441129_kartinkof-club-p-programmirovanie-kartinki-8.jpg'
    caption = '–í–æ—Ç –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞!'
    await bot.send_photo(message.chat.id, photo=photo_url, caption=caption)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã" –≤ –º–µ–Ω—é
@dp.message_handler(text='üõí –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã', state="*")
async def process_show_products(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º Inline Keyboard –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤
    keyboard = types.InlineKeyboardMarkup()
    for product_id, product_info in products_db.items():
        button_text = f"{product_info['title']} - {product_info['price']} —Ä—É–±."
        callback_data = f'show_product_{product_id}'
        button = types.InlineKeyboardButton(text=button_text, callback_data=callback_data)
        keyboard.add(button)
    await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–∫–µ
@dp.callback_query_handler(lambda query: query.data.startswith('show_product'), state="*")
async def process_show_product(callback_query: types.CallbackQuery):
    product_id = int(callback_query.data.split('_')[-1])
    product_info = products_db.get(product_id)
    await bot.send_message(callback_query.from_user.id, f"–¢–æ–≤–∞—Ä: {product_info['title']}, –¶–µ–Ω–∞: {product_info['price']} —Ä—É–±.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" –≤ –º–µ–Ω—é
@dp.message_handler(text='‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', state="*")
async def process_information(message: types.Message):
    await message.answer("–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–≤–∞—Ä—ã –∏ –∏–º–∏—Ç–∞—Ü–∏—é –∏—Ö –ø–æ–∫—É–ø–æ–∫! –ñ–º–∏ –∫–Ω–æ–ø–∫—É –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã. –ü—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /photo –ø–æ—è–≤–∏—Ç—Å—è —Ñ–æ—Ç–æ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —á—Ç–æ–±—ã —è –Ω–∞–ø–∏—Å–∞–ª –Ω–∞ —Ç–≤–æ–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ hello world –ø—Ä–∏—Å—ã–ª–∞–π –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
